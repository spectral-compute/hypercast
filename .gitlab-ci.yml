stages:
  - Build-Development
  - Lint
  - Test
  - Build-Production
  - Deploy

.env:
  image: $DOCKER_REGISTRY/spectral/build/nodejs

Build:
  extends: .env
  stage: Build-Development
  script:
    - run "cd src && yarn install"
    - run "cd src && yarn bundle-dev"
  variables:
    CI_PROPAGATE_WORKSPACE: 1

Lint:
  extends: .env
  stage: Lint
  script:
    - run "cd src && yarn foreach lint"
  variables:
    GIT_STRATEGY: none

Test:
  extends: .env
  stage: Test
  script:
    - run "cd src && yarn test"
  variables:
    GIT_STRATEGY: none

Build-Production:
  extends: .env
  stage: Build-Production
  script:
    # Clean the source tree (yarn insists on in-tree builds D: ), and check that the clean worked..
    - run "cd src && yarn clean"
    - run bash -c 'cd src && [[ "$(git clean -dXn | wc -l)" == "0" ]]' # Test to see if yarn clean removed everything.

    # Yarn has the stupid property that it needs a plugin to do a production install. Install that badly named plugin
    # and use it to do a production install. Add the plugin here rather than in git because doing the latter would mean
    # committing the plugin itself into git - yuck!
    - run "cd src && yarn plugin import workspace-tools"
    - run "cd src && yarn workspaces focus --production --all"

    # Actually do the build.
    - run "cd src && yarn bundle"
  variables:
    GIT_STRATEGY: none

Package:
  extends: .env
  stage: Build-Production
  script:
    - run "cd src && yarn package"
    - run "cd src && find | grep -F spectral-video-streamer-" # Check we got the package.
  variables:
    GIT_STRATEGY: none

Manual:
  extends: .env
  stage: Deploy
  variables:
    GIT_STRATEGY: none
  script:
    - run mkdir docs_inst
    - run "cd src && docs/build.sh ../docs_inst"
    - run publishDocs.sh docs_inst
